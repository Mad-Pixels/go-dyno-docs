version: '3'

vars:
  git_root:
    sh: git rev-parse --show-toplevel

  node_version: "23"
  terraform: 1.8.5
  dev_port: 3000

tasks:
  default:
    desc: Default task.
    cmds:
      - echo "Please enter a task or use '-l' or '--list-all' to list all available tasks"
    silent: true

# ================================================#
# ---------------------INTERNAL-------------------#
# ================================================#
  
  _docker/pull:
    internal: true
    cmds:
      - |
        if ! docker image inspect "{{.IMAGE}}" >/dev/null 2>&1; then
          docker pull -q "{{.IMAGE}}" >/dev/null 2>&1 || {
            echo "Failed to pull image: {{.IMAGE}}"
            exit 1
          }
        fi
    silent: true
    requires:
      vars: [IMAGE]

  _docker/run:
    internal: true
    dir: "{{.git_root}}"
    deps:
      - task: _docker/pull
        vars: { IMAGE: "{{.IMAGE}}" }
    cmd: |
      docker run --rm --init --pull=never {{if .TTY}}-it{{end}} \
        --cap-drop=ALL \
        --security-opt no-new-privileges \
        --user $(id -u):$(id -g) \
        --workdir /workspace \
        {{if .ENVS}}{{range $e := .ENVS}}--env {{$e}} {{end}}{{end}}\
        {{if .PORTS}}{{range $p := .PORTS}}--publish {{$p}} {{end}}{{end}}\
        {{if .VOLUMES}}{{range $v := .VOLUMES}}--volume {{$v}} {{end}}{{end}}\
        --volume "{{.git_root}}/{{.MOUNT_DIR}}:/workspace:rw" \
        "{{.IMAGE}}" \
        {{.CMD}}
    silent: true
    requires:
      vars: [IMAGE, CMD, MOUNT_DIR]

# ================================================#
# ----------------------PUBLIC--------------------#
# ================================================#

  terraform/fmt/fix:
    desc: Run 'terraform fmt'.
    cmds:
      - task: _docker/run
        vars:
          IMAGE: "hashicorp/terraform:{{.terraform}}"
          CMD: "fmt -recursive -diff -write=true"
          MOUNT_DIR: "terraform"
    silent: true

  node/format/fix:
    desc: Run Prettier.
    cmds:
      - task: _docker/run
        vars:
          IMAGE: "node:{{.node_version}}"
          CMD: "sh -c 'npm ci && npx prettier --write docs/'"
          MOUNT_DIR: "."
          ENVS:
            - "NPM_CONFIG_CACHE=/workspace/.cache"
            - "NPM_CONFIG_UPDATE_NOTIFIER=false"
    silent: true

  node/audit/fix:
    desc: Run dependencies audit force fix.
    cmds:
      - task: _docker/run
        vars:
          IMAGE: "node:{{.node_version}}"
          CMD: "sh -c 'npm ci && npm audit fix --omit=dev'"
          MOUNT_DIR: "."
          ENVS: 
            - "NPM_CONFIG_CACHE=/workspace/.cache"
            - "NPM_CONFIG_UPDATE_NOTIFIER=false"
    silent: true

  dev: 
    desc: Run dev on {{ .dev_port }}. 
    cmds: 
      - task: _docker/run 
        vars: 
          IMAGE: "node:{{.node_version}}"
          CMD: "sh -c 'npm ci && npm run dev -- --host 0.0.0.0 --port {{ .dev_port }}'"
          MOUNT_DIR: "."
          PORTS:
            - "{{ .dev_port }}:{{ .dev_port }}"
          ENVS:
            - "NPM_CONFIG_CACHE=/workspace/.cache"
            - "NPM_CONFIG_UPDATE_NOTIFIER=false"
          TTY: "true"

# ================================================#
# ----------------------CI/CD---------------------#
# ================================================#

  terraform/fmt:
    desc: Check 'terraform fmt' compliance (fails if not formatted).
    cmds:
      - task: _docker/run
        vars:
          IMAGE: "hashicorp/terraform:{{.terraform}}"
          CMD: "fmt -check -recursive -diff"
          MOUNT_DIR: "terraform"
    silent: true

  node/format:
    desc: Run Prettier.
    cmds:
      - task: _docker/run
        vars:
          IMAGE: "node:{{.node_version}}"
          CMD: "sh -c 'npm ci && npx prettier --check docs/'"
          MOUNT_DIR: "."
          ENVS:
            - "NPM_CONFIG_CACHE=/workspace/.cache"
            - "NPM_CONFIG_UPDATE_NOTIFIER=false"
    silent: true

  node/audit:
    desc: Run dependencies audit.
    cmds:
      - task: _docker/run
        vars:
          IMAGE: "node:{{.node_version}}"
          CMD: "sh -c 'npm ci && npm audit --audit-level high --omit=dev'"
          MOUNT_DIR: "."
          ENVS: 
            - "NPM_CONFIG_CACHE=/workspace/.cache"
            - "NPM_CONFIG_UPDATE_NOTIFIER=false"
    silent: true

  node/build:
    desc: Build production version.
    cmds:
      - task: _docker/run
        vars:
          IMAGE: "node:{{.node_version}}"
          CMD: "sh -c 'npm install && npm run build'"
          MOUNT_DIR: "."
          ENVS:
            - "NPM_CONFIG_CACHE=/workspace/.cache"
            - "NPM_CONFIG_UPDATE_NOTIFIER=false"
    silent: true

